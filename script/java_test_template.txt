import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.*;
import java.util.Random;

public final class lab_%1$s_%2$s_Test {
    private static final String[] init_String = new String[0];
    private static final String DATA_PATH = "lab%1$s/lab_%1$s_%2$s_data/";
    private static final long begin_time = System.currentTimeMillis();
    private static final Random random = new Random();
    private static Redirect redirect;

    @BeforeAll
    public static void init() {
        redirect = new Redirect(DATA_PATH);
    }

    @Order(0)
    @Test
    public void test_0() {
        for (int i = 0; i < 114; i++) {
            int x = random.nextInt(0x3f3f3f3f);
            int y = random.nextInt(0x3f3f3f3f);
            assertEquals(x + y, lab_%1$s_%2$s.cal(new int[]{x, y}));
        }
    }
    @Order(1)
    @Test
    public void test_2() throws IOException {
        redirect.set_path("01.data.in", "01.test.out");
        lab_%1$s_%2$s.output(lab_%1$s_%2$s.cal(lab_%1$s_%2$s.read()));
        Pair<String,String> p = redirect.compare_double("01.data.out", "01.test.out");
        assertEquals(p.getFirst().length(),p.getSecond().length());
        assertEquals(p.getFirst(),p.getSecond());


        redirect.set_path("01.data.in", "01.test.out");
        lab_%1$s_%2$s.output(lab_%1$s_%2$s.cal(lab_%1$s_%2$s.reader()));
        p = redirect.compare_double("01.data.out", "01.test.out");
        assertEquals(p.getFirst().length(),p.getSecond().length());
        assertEquals(p.getFirst(),p.getSecond());
    }

    @Order(2)
    @Test
    public void test_3() throws IOException {
        redirect.set_path("01.data.in");
        assertEquals(628, lab_%1$s_%2$s.cal(lab_%1$s_%2$s.read()));

        redirect.set_path("01.data.in");
        assertEquals(628, lab_%1$s_%2$s.cal(lab_%1$s_%2$s.reader()));

    }
    @AfterAll
    public static void last_one() throws IOException {
        redirect.close();
        System.out.printf("cost %%d ms%%n", System.currentTimeMillis() - begin_time);
    }
}